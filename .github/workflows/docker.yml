name: Docker

on:
  workflow_dispatch:
    inputs:
      CONTAINER_REGISTRY_SELECTED:
        description: 'Select Container Registry'
        required: true
        type: choice
        options:
          - 'ghcr.io'
          - 'dockerhub'
          - 'azurecr.io'
      CONTAINER_IMAGE_TAG:
        description: 'Insert the container image tag'
        required: true


jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt' # https://github.com/actions/setup-java#basic-configuration

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - uses: actions/upload-artifact@v3
        with:
          path: ./*/*/*.jar
          name: app
          if-no-files-found: error

  GithubContainerRegistry:
    if: ${{ github.event.inputs.CONTAINER_REGISTRY_SELECTED == 'ghcr.io' }}
    runs-on: ubuntu-22.04
    needs: Build
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: app

      - name: List files
        run: |
          ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        run: |
          export CR_PAT=${{ secrets.GITHUB_TOKEN }}
          echo $CR_PAT | docker login ghcr.io -u ${{ vars.CONTAINER_REGISTRY_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build --build-arg JAR_FILE='build/libs/*.jar' -t ghcr.io/${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }} .

      - name: Push Docker Image to Registry
        run: |
          docker push ghcr.io/${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}

      - name: Aqua Trivy (Container Image Scan)
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: 'ghcr.io/${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'
          scan-type: 'image'
          format: 'json'
          output: 'trivy-report.json'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os'

      - name: Check Vuln Count
        run: |
          report_file="trivy-report.json"
          vuln_count=$(jq '.Results | length' "$report_file")
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT

      - name: Copacetic Action
        uses: project-copacetic/copa-action@v1.0.1
        with:
          image: 'ghcr.io/${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'
          image-report: 'trivy-report.json'
          patched-tag: '${{ github.event.inputs.CONTAINER_IMAGE_TAG }}-patched'
          buildkit-version: 'v0.11.6'
          copa-version: '0.4.1'

      - name: Push Docker Image Patched to Registry
        run: |
          docker push ghcr.io/${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}-patched

  DockerHub:
    if: ${{ github.event.inputs.CONTAINER_REGISTRY_SELECTED == 'dockerhub' }}
    runs-on: ubuntu-22.04
    needs: Build
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: app

      - name: List files
        run: |
          ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to dockerhub
        run: |
          export CR_PAT=${{ secrets.DOCKERHUB_TOKEN }}
          echo $CR_PAT | docker login -u ${{ vars.CONTAINER_REGISTRY_USERNAME }} --password-stdin 'docker.io'

      - name: Build Docker Image
        run: |
          docker build --build-arg JAR_FILE='build/libs/*.jar' -t '${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}' .

      - name: Aqua Trivy (Container Image Scan)
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: '${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'
          scan-type: 'image'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os'

      - name: Copacetic Action
        run: | 
          echo "No copa execution for dockerhub"

      - name: Push Docker Image to Registry
        run: |
          docker push '${{ vars.CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'

  AzureContainerRegistry:
    if: ${{ github.event.inputs.CONTAINER_REGISTRY_SELECTED == 'azurecr.io' }}
    runs-on: ubuntu-22.04
    needs: Build
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: app

      - name: List files
        run: |
          ls -R

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        run: |
          export CR_PAT=${{ secrets.AZURE_CONTAINER_REGISTRY_TOKEN }}
          echo $CR_PAT | docker login ${{ vars.AZURE_CONTAINER_REGISTRY_NAME}}.azurecr.io -u ${{ vars.AZURE_CONTAINER_REGISTRY_USERNAME }} --password-stdin

      - name: Build Docker Image
        run: |
          docker build --build-arg JAR_FILE='build/libs/*.jar' -t '${{ vars.AZURE_CONTAINER_REGISTRY_NAME}}.azurecr.io/${{ vars.AZURE_CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}' .

      - name: Aqua Trivy (Container Image Scan)
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: '${{ vars.AZURE_CONTAINER_REGISTRY_NAME}}.azurecr.io/${{ vars.AZURE_CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'
          scan-type: 'image'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os'

      - name: Copacetic Action
        run: |
          echo "No copa execution for azurecr.io"

      - name: Push Docker Image to Registry
        run: |
          docker push '${{ vars.AZURE_CONTAINER_REGISTRY_NAME}}.azurecr.io/${{ vars.AZURE_CONTAINER_REGISTRY_USERNAME }}/${{ vars.CONTAINER_REGISTRY_REPO_NAME }}:${{ github.event.inputs.CONTAINER_IMAGE_TAG }}'
